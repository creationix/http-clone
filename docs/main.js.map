{"version":3,"file":"main.js","sourceRoot":"","sources":["../src/main.ts"],"names":[],"mappings":"AAAA,OAAO,EAAQ,UAAU,EAAE,MAAM,aAAa,CAAC;AAC/C,OAAO,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,gBAAgB,CAAC;AAC/C,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAC;AAC7C,OAAO,EAAE,QAAQ,EAAE,MAAM,YAAY,CAAA;AAErC,SAAS,IAAI,CAAC,GAAW;IACrB,OAAO,CAAC,GAAG,EAAE,EAAE,IAAI,EAAE,IAAI,GAAG,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC;AAC3C,CAAC;AAED,KAAK,UAAU,IAAI;IAGf,MAAM,KAAK,GAAG,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;IACvD,IAAI,CAAC,KAAK,EAAE;QACR,QAAQ,CAAC,IAAI,CAAC,WAAW,GAAG,+CAA+C,CAAA;QAC3E,OAAO;KACV;IACD,MAAM,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;IACpB,MAAM,GAAG,GAAG,MAAM,UAAU,CAAC,GAAG,CAAC,CAAC;IAElC,KAAK,UAAU,MAAM;QACjB,MAAM,MAAM,GAAG,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;QACtD,MAAM,GAAG,GAAG,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,GAAG,CAAC,OAAO,EAAE,CAAC;QACrD,MAAM,IAAI,GAAG,MAAM,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;QAEpC,QAAQ,CAAC,IAAI,CAAC,WAAW,GAAG,EAAE,CAAC;QAC/B,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC;YACjC,CAAC,IAAI,EAAE,GAAG,CAAC;YACX,CAAC,IAAI;gBACD,CAAC,GAAG,KAAK,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;gBACxD,CAAC,IAAI,EAAE,MAAM,CAAC,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;aACrC;SACJ,CAAC,CAAC,CAAC;QAGJ,MAAM,MAAM,GAAG,MAAM,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAEpC,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC,IAAI,EAAE,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QAE3D,IAAI,MAAM,CAAC,IAAI,KAAK,QAAQ,EAAE;YAC1B,MAAM,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC;YAC3B,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC,IAAI;gBACtC,CAAC,IAAI,EAAE,MAAM,CAAC,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;gBACzC,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,EAAE,SAAS,CAAC,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;gBACvE,CAAC,IAAI,EAAE,QAAQ,CAAC,EAAE,CAAC,IAAI,EAAE,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,KAAK,MAAM,CAAC,MAAM,CAAC,KAAK,KAAK,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,EAAE,CAAC;gBACzH,CAAC,IAAI,EAAE,WAAW,CAAC,EAAE,CAAC,IAAI,EAAE,GAAG,MAAM,CAAC,SAAS,CAAC,IAAI,KAAK,MAAM,CAAC,SAAS,CAAC,KAAK,KAAK,IAAI,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,EAAE,CAAC;gBACrI,CAAC,IAAI,EAAE,SAAS,CAAC,EAAE,CAAC,IAAI,EAAE,CAAC,KAAK,EAAE,MAAM,CAAC,OAAO,CAAC,CAAC;aACrD,CAAC,CAAC,CAAC;SACP;aAEI,IAAI,MAAM,CAAC,IAAI,KAAK,MAAM,EAAE;YAC7B,MAAM,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC;YACzB,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC,OAAO;gBACzC,CAAC,OAAO;oBACJ,CAAC,IAAI;wBACD,CAAC,IAAI,EAAE,MAAM,CAAC,EAAE,CAAC,IAAI,EAAE,MAAM,CAAC,EAAE,CAAC,IAAI,EAAE,MAAM,CAAC,EAAE,CAAC,IAAI,EAAE,MAAM,CAAC;qBACjE;iBACJ;gBACD,CAAC,OAAO,EAAE,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,CAC1D,CAAC,IAAI;wBACD,CAAC,IAAI,EAAE,IAAI,CAAC,EAAE,CAAC,IAAI,EAAE,MAAM,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;qBACzF,CAAC;iBACL;aACJ,CAAC,CAAC,CAAC;SACP;aAEI,IAAI,MAAM,CAAC,IAAI,KAAK,MAAM,EAAE;YAC7B,MAAM,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC;YACzB,IAAI;gBACA,MAAM,IAAI,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAC;gBAC5B,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC;oBACjC,CAAC,GAAG,EAAE,kBAAkB,IAAI,CAAC,MAAM,SAAS,CAAC;oBAC7C,CAAC,KAAK,EAAE,IAAI,CAAC;iBAChB,CAAC,CAAC,CAAC;aACP;YAAC,OAAO,GAAG,EAAE;gBACV,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC,GAAG,EAAE,oBAAoB,IAAI,CAAC,MAAM,SAAS,CAAC,CAAC,CAAC,CAAC;aAC1F;SACJ;IACL,CAAC;IAED,MAAM,CAAC,YAAY,GAAG,MAAM,CAAC;IAC7B,MAAM,EAAE,CAAC;AAcb,CAAC;AACD,IAAI,EAAE,CAAC;AAEP,KAAK,SAAS,CAAC,CAAC,QAAQ,CAAC,GAAS,EAAE,GAAW;IAC3C,MAAM,MAAM,GAAG,MAAM,GAAG,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;IACzC,MAAM,KAAK,GAAmD;QAC1D,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,KAAK,CAAC,IAAI,EAAE,IAAI,EAAE,MAAM,CAAC,IAAI,EAAE;KACrD,CAAC;IACF,OAAO,IAAI,EAAE;QACT,MAAM,KAAK,GAAG,KAAK,CAAC,KAAK,EAAE,CAAC;QAC5B,IAAI,CAAC,KAAK;YAAE,MAAM;QAClB,MAAM,KAAK,CAAC;QACZ,IAAI,KAAK,CAAC,IAAI,KAAK,KAAK,CAAC,IAAI,EAAE;YAC3B,MAAM,IAAI,GAAG,MAAM,GAAG,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;YAC5C,KAAK,MAAM,CAAC,IAAI,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;gBACvD,KAAK,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,KAAK,CAAC,IAAI,GAAG,IAAI,GAAG,CAAC,IAAI,KAAK,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC;aAC1F;SACJ;KACJ;AACL,CAAC;AAGD,KAAK,SAAS,CAAC,CAAC,SAAS,CAAC,GAAS,EAAE,GAAW;IAC5C,MAAM,OAAO,GAAa,CAAC,MAAM,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC;IACnD,OAAO,IAAI,EAAE;QACT,MAAM,IAAI,GAAG,OAAO,CAAC,KAAK,EAAE,CAAC;QAC7B,IAAI,CAAC,IAAI;YAAE,MAAM;QACjB,MAAM,MAAM,GAAG,MAAM,GAAG,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;QAC1C,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;QACvB,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,MAAM,CAAC,OAAmB,CAAC,CAAC;KAC3D;AACL,CAAC","sourcesContent":["import { IGit, newGitRepo } from \"./git-db.js\";\nimport { modes, toType } from \"./git-codec.js\";\nimport { domBuilder } from \"./dombuilder.js\";\nimport { toString } from \"./utils.js\"\n\nfunction link(ref: string) {\n    return [\"a\", { href: `#${ref}` }, ref];\n}\n\nasync function main() {\n\n    // Pull git remote from search part of URL\n    const match = document.location.search.match(/http.*/);\n    if (!match) {\n        document.body.textContent = \"Please add git repo to url as query string...\"\n        return;\n    }\n    const [url] = match;\n    const git = await newGitRepo(url);\n\n    async function render() {\n        const match2 = document.location.hash.match(/#?(.+)/);\n        const ref = match2 ? match2[1] : await git.getHead();\n        const hash = await git.resolve(ref);\n\n        document.body.textContent = '';\n        document.body.appendChild(domBuilder([\n            [\"h1\", url],\n            [\"dl\",\n                (ref !== hash ? [['dt', 'ref'], ['dd', link(ref)]] : []),\n                ['dt', 'hash'], ['dd', link(hash)],\n            ],\n        ]));\n\n        // Load the object and render it.\n        const result = await git.load(hash);\n\n        document.body.appendChild(domBuilder([\"h2\", result.type]));\n\n        if (result.type === \"commit\") {\n            const commit = result.body;\n            document.body.appendChild(domBuilder([\"dl\",\n                [\"dt\", 'tree'], ['dd', link(commit.tree)],\n                commit.parents.map(parent => [[\"dt\", 'parent '], ['dd', link(parent)]]),\n                [\"dt\", 'author'], ['dd', `${commit.author.name} <${commit.author.email}> ${new Date(commit.author.date.seconds * 1000)}`],\n                [\"dt\", 'committer'], ['dd', `${commit.committer.name} <${commit.committer.email}> ${new Date(commit.committer.date.seconds * 1000)}`],\n                [\"dt\", 'message'], ['dd', ['pre', commit.message]]\n            ]));\n        }\n\n        else if (result.type === \"tree\") {\n            const tree = result.body;\n            document.body.appendChild(domBuilder([\"table\",\n                ['thead',\n                    ['tr',\n                        ['th', 'Name'], ['th', 'Type'], ['th', 'Mode'], ['th', 'hash']\n                    ]\n                ],\n                ['tbody', Object.entries(tree).map(([name, { mode, hash }]) =>\n                    ['tr',\n                        ['td', name], ['td', toType(mode)], ['td', `0${mode.toString(8)}`], ['td', link(hash)]\n                    ])\n                ]\n            ]));\n        }\n\n        else if (result.type === \"blob\") {\n            const blob = result.body;\n            try {\n                const text = toString(blob);\n                document.body.appendChild(domBuilder([\n                    ['p', `Text file with ${blob.length} bytes.`],\n                    ['pre', text]\n                ]));\n            } catch (err) {\n                document.body.appendChild(domBuilder(['p', `Binary file with ${blob.length} bytes.`]));\n            }\n        }\n    }\n\n    window.onhashchange = render;\n    render();\n\n\n    // Showing some sample helper functions\n\n    // for await (const { hash, commit: { message, committer: { name, email, date } } } of commitLog(git, \"HEAD\")) {\n    //     console.log(`Commit: ${hash}\\n`\n    //         + `Committer: ${name} <${email}> ${new Date(date.seconds * 1000)}\\n`\n    //         + `\\n${message}`);\n    // }\n\n    // for await (const { path, mode, hash } of walkTree(git, \"HEAD\")) {\n    //     console.log(path, toType(mode), hash);\n    // }\n}\nmain();\n\nasync function* walkTree(git: IGit, ref: string) {\n    const commit = await git.loadCommit(ref);\n    const queue: { path: string, mode: number, hash: string }[] = [\n        { path: \"/\", mode: modes.tree, hash: commit.tree }\n    ];\n    while (true) {\n        const entry = queue.shift();\n        if (!entry) break;\n        yield entry;\n        if (entry.mode === modes.tree) {\n            const tree = await git.loadTree(entry.hash);\n            for (const [name, { mode, hash }] of Object.entries(tree)) {\n                queue.push({ path: entry.path + name + (mode === modes.tree ? \"/\" : \"\"), mode, hash });\n            }\n        }\n    }\n}\n\n// Async Generator for printing log of commits.\nasync function* commitLog(git: IGit, ref: string) {\n    const commits: string[] = [await git.resolve(ref)];\n    while (true) {\n        const hash = commits.shift();\n        if (!hash) break;\n        const commit = await git.loadCommit(hash);\n        yield { hash, commit };\n        commits.push.apply(commits, commit.parents as string[]);\n    }\n}\n"]}