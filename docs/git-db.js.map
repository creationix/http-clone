{"version":3,"file":"git-db.js","sourceRoot":"","sources":["../src/git-db.ts"],"names":[],"mappings":"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","sourcesContent":["import { TaggedObject, deframe, GitCommit, GitTag, GitTree, GitBlob } from \"./git-codec.js\";\nimport pako from \"./jspm_packages/npm/pako@1.0.11/index.js\";\n\nconst isHash = /^[0-9a-f]{40}$/;\n\nexport interface IGit {\n    resolve: (ref: string) => Promise<string>,\n    loadTag: (hash: string) => Promise<GitTag>,\n    loadCommit: (hash: string) => Promise<GitCommit>,\n    loadTree: (hash: string) => Promise<GitTree>,\n    loadBlob: (hash: string) => Promise<GitBlob>,\n    load: (hash: string) => Promise<TaggedObject>,\n    get: (hash: string) => Promise<ArrayBuffer>,\n    getHead: () => Promise<string>,\n    update: () => Promise<void>,\n};\n\nexport async function newGitRepo(url: string): Promise<IGit> {\n\n    // Unique refs database for this url.\n    const refs = await newKeyValue<string, string>(`${url}`);\n    // Shared objects database for all git repos.\n    const objects = await newKeyValue<string, ArrayBuffer>(`objects`);\n\n    let updatingHead: Promise<void> | undefined;\n    let updatingInfo: Promise<void> | undefined;\n\n    return {\n        resolve,\n        loadTag,\n        loadCommit,\n        loadTree,\n        loadBlob,\n        load,\n        get,\n        getHead,\n        update\n    };\n\n    function updateHead(): Promise<void> {\n        if (updatingHead) return updatingHead;\n        return updatingHead = (async () => {\n            const res = await fetch(`${url}/HEAD`);\n            if (res.status !== 200) throw new Error(`Unexpected ${res.status} status code response from HEAD.`);\n            const line = await res.text();\n            const match = line.match(/^ref: *([^ \\r\\n]+)/);\n            if (!match) throw new Error(`Unexpected content ${JSON.stringify(line)} in HEAD response.`);\n            const head = match[1];\n            await refs.set(\"HEAD\", head);\n            updatingHead = undefined;\n        })();\n    }\n\n    async function getHead(): Promise<string> {\n        const head = await refs.get(\"HEAD\");\n        if (head) return head;\n        await updateHead();\n        return getHead();\n    }\n\n    function updateInfo(): Promise<void> {\n        if (updatingInfo) return updatingInfo;\n        return updatingInfo = (async () => {\n            updatingInfo = undefined;\n            const res = await fetch(`${url}/info/refs`);\n            if (res.status !== 200) throw new Error(`Unexpected ${res.status} status code response from info/refs.`);\n            const lines = await res.text();\n            await Promise.all(\n                lines.split('\\n').filter(Boolean).map((line) => {\n                    const [hash, name] = line.split('\\t');\n                    return refs.set(name, hash);\n                })\n            );\n            updatingInfo = undefined;\n        })();\n    }\n\n    async function resolve(ref: string): Promise<string> {\n        if (isHash.test(ref)) return ref;\n        if (ref === \"HEAD\") return resolve(await getHead());\n        const cached = await refs.get(ref);\n        if (cached) return cached;\n        await updateInfo();\n        const cached2 = await refs.get(ref);\n        if (cached2) return cached2;\n        throw new Error(`No such ref ${JSON.stringify(ref)}`);\n    }\n\n    async function get(hash: string): Promise<ArrayBuffer> {\n        if (!isHash.test(hash)) return get(await resolve(hash));\n        const cached = await objects.get(hash);\n        if (cached) return cached;\n        const buf = await fetch(`${url}/objects/${hash.substr(0, 2)}/${hash.substr(2)}`)\n            .then(res => res.arrayBuffer());\n        await objects.set(hash, buf);\n        return buf;\n    }\n\n    async function load(hash: string): Promise<TaggedObject> {\n        if (!isHash.test(hash)) return load(await resolve(hash));\n        const body = await get(hash);\n        return deframe(pako.inflate(body), true);\n    }\n\n    async function loadTag(hash: string): Promise<GitTag> {\n        const obj = await load(hash);\n        if (obj.type !== \"tag\") throw new Error(`Expected tag, but found ${obj.type}`);\n        return obj.body;\n    }\n\n    async function loadCommit(hash: string): Promise<GitCommit> {\n        const obj = await load(hash);\n        if (obj.type !== \"commit\") throw new Error(`Expected commit, but found ${obj.type}`);\n        return obj.body;\n    }\n\n    async function loadTree(hash: string): Promise<GitTree> {\n        const obj = await load(hash);\n        if (obj.type !== \"tree\") throw new Error(`Expected tree, but found ${obj.type}`);\n        return obj.body;\n    }\n\n    async function loadBlob(hash: string): Promise<GitBlob> {\n        const obj = await load(hash);\n        if (obj.type !== \"blob\") throw new Error(`Expected blob, but found ${obj.type}`);\n        return obj.body;\n    }\n\n    async function update(): Promise<void> {\n        await Promise.all([\n            updateHead(),\n            updateInfo(),\n        ]);\n    }\n}\n\nexport interface IDB<K, V> {\n    get: (key: K) => Promise<V | undefined>,\n    set: (key: K, value: V) => Promise<K>,\n}\n\nexport function newKeyValue<K extends IDBValidKey, V>(prefix: string) {\n    let db: IDBDatabase;\n    return new Promise<IDB<K, V>>((resolve, reject) => {\n        let version = 1;\n        const request = indexedDB.open(prefix, version);\n        request.onupgradeneeded = () => {\n            version++;\n            db = request.result;\n            db.createObjectStore(\"data\");\n        };\n        request.onsuccess = () => {\n            db = request.result;\n            resolve({ get, set });\n        };\n        request.onerror = () => reject(request.error);\n    });\n\n    function get(key: K) {\n        return new Promise<V | undefined>((resolve, reject) => {\n            const transaction = db.transaction(\"data\", \"readonly\");\n            const store = transaction.objectStore(\"data\");\n            const request = store.get(key);\n            request.onsuccess = () => resolve(request.result);\n            request.onerror = () => reject(request.error);\n        });\n    }\n\n    function set(key: K, value: V) {\n        return new Promise<K>((resolve, reject) => {\n            const transaction = db.transaction(\"data\", \"readwrite\");\n            const store = transaction.objectStore(\"data\");\n            const request = store.put(value, key);\n            request.onsuccess = () => resolve(request.result as K);\n            request.onerror = () => reject(request.error);\n        });\n    }\n};\n"]}