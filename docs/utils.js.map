{"version":3,"file":"utils.js","sourceRoot":"","sources":["../src/utils.ts"],"names":[],"mappings":"AAEA,MAAM,UAAU,KAAK,CAAC,MAAkB,EAAE,QAAgB,CAAC,EAAE,MAAc,MAAM,CAAC,MAAM;IACpF,IAAI,GAAG,GAAG,EAAE,CAAC;IACb,KAAK,IAAI,CAAC,GAAG,KAAK,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE;QAC9B,GAAG,IAAI,MAAM,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;KACzC;IACD,OAAO,GAAG,CAAC;AACf,CAAC;AAED,MAAM,UAAU,QAAQ,CAAC,MAAkB,EAAE,QAAgB,CAAC,EAAE,MAAc,MAAM,CAAC,MAAM;IACvF,OAAO,UAAU,CAAC,KAAK,CAAC,MAAM,EAAE,KAAK,EAAE,GAAG,CAAC,CAAC,CAAC;AACjD,CAAC;AAED,MAAM,UAAU,KAAK,CAAC,MAAkB,EAAE,QAAgB,CAAC,EAAE,MAAc,MAAM,CAAC,MAAM;IACpF,IAAI,GAAG,GAAG,EAAE,CAAC;IACb,KAAK,IAAI,CAAC,GAAG,KAAK,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE;QAC9B,MAAM,IAAI,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;QACpC,GAAG,IAAI,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,IAAI,CAAC,CAAC;KAChD;IACD,OAAO,GAAG,CAAC;AACf,CAAC;AAED,MAAM,UAAU,OAAO,CAAC,MAAkB,EAAE,IAAY,EAAE,IAAY,CAAC;IACnE,MAAM,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC;IAC7B,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,EAAE,EAAE;QAC1B,IAAI,MAAM,CAAC,CAAC,CAAC,KAAK,IAAI;YAAE,OAAO,CAAC,CAAC;KACpC;IACD,OAAO,CAAC,CAAC,CAAC;AACd,CAAC;AAED,MAAM,UAAU,QAAQ,CAAC,MAAkB,EAAE,KAAa,EAAE,GAAW;IACnE,IAAI,GAAG,GAAG,CAAC,CAAC;IACZ,OAAO,KAAK,GAAG,GAAG,EAAE;QAChB,GAAG,GAAG,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,MAAM,CAAC,KAAK,EAAE,CAAC,GAAG,IAAI,CAAC;KAC7C;IACD,OAAO,GAAG,CAAC;AACf,CAAC;AAED,MAAM,UAAU,QAAQ,CAAC,MAAkB,EAAE,KAAa,EAAE,GAAW;IACnE,IAAI,GAAG,GAAG,CAAC,CAAC;IACZ,OAAO,KAAK,GAAG,GAAG,EAAE;QAChB,GAAG,GAAG,GAAG,GAAG,EAAE,GAAG,MAAM,CAAC,KAAK,EAAE,CAAC,GAAG,IAAI,CAAC;KAC3C;IACD,OAAO,GAAG,CAAC;AACf,CAAC;AAED,MAAM,UAAU,UAAU,CAAC,GAAW;IAClC,OAAO,kBAAkB,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC;AAC3C,CAAC","sourcesContent":["// tslint:disable: no-bitwise\n\nexport function toRaw(buffer: Uint8Array, start: number = 0, end: number = buffer.length): string {\n    let str = \"\";\n    for (let i = start; i < end; i++) {\n        str += String.fromCharCode(buffer[i]);\n    }\n    return str;\n}\n\nexport function toString(buffer: Uint8Array, start: number = 0, end: number = buffer.length): string {\n    return utf8Decode(toRaw(buffer, start, end));\n}\n\nexport function toHex(buffer: Uint8Array, start: number = 0, end: number = buffer.length): string {\n    let hex = \"\";\n    for (let i = start; i < end; i++) {\n        const byte = buffer[i].toString(16);\n        hex += byte.length > 1 ? byte : ('0' + byte);\n    }\n    return hex;\n}\n\nexport function indexOf(buffer: Uint8Array, byte: number, i: number = 0) {\n    const length = buffer.length;\n    for (i |= 0; i < length; i++) {\n        if (buffer[i] === byte) return i;\n    }\n    return -1;\n}\n\nexport function parseOct(buffer: Uint8Array, start: number, end: number) {\n    let val = 0;\n    while (start < end) {\n        val = (val << 3) + buffer[start++] - 0x30;\n    }\n    return val;\n}\n\nexport function parseDec(buffer: Uint8Array, start: number, end: number) {\n    let val = 0;\n    while (start < end) {\n        val = val * 10 + buffer[start++] - 0x30;\n    }\n    return val;\n}\n\nexport function utf8Decode(raw: string): string {\n    return decodeURIComponent(escape(raw));\n}\n"]}