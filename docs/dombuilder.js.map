{"version":3,"file":"dombuilder.js","sourceRoot":"","sources":["../src/dombuilder.ts"],"names":[],"mappings":"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","sourcesContent":["//////////////////////////////////////\n//                                  //\n// JS domBuilder Library            //\n//                                  //\n// Tim Caswell <tim@creationix.com> //\n//                                  //\n//////////////////////////////////////\n\nconst CLASS_MATCH = /\\.[^.#$]+/g;\nconst ID_MATCH = /#[^.#$]+/;\nconst REF_MATCH = /\\$[^.#$]+/;\nconst TAG_MATCH = /^[^.#$]+/;\n\n\nexport function domBuilder(json: any, refs?: { [key: string]: HTMLElement }): HTMLElement | DocumentFragment | Text {\n\n    // Render strings as text nodes\n    if (typeof json === 'string') return document.createTextNode(json);\n\n    // Pass through html elements and text nodes as-is\n    if (json instanceof HTMLElement || json instanceof Text || json instanceof DocumentFragment) return json;\n\n    // Stringify any other value types\n    if (!Array.isArray(json)) return document.createTextNode(json + \"\");\n\n    // Empty arrays are just empty fragments.\n    if (!json.length) return document.createDocumentFragment();\n\n    let node: HTMLElement | DocumentFragment | Text | undefined;\n    let first = false;\n    for (let i = 0, l = json.length; i < l; i++) {\n        const part = json[i];\n\n        if (!node) {\n            if (typeof part === 'string') {\n                // Create a new dom node by parsing the tagline\n                const match = part.match(TAG_MATCH);\n                const tag = match ? match[0] : \"div\";\n                node = document.createElement(tag);\n                first = true;\n                const classes = part.match(CLASS_MATCH);\n                if (classes) node.setAttribute('class', classes.map(stripFirst).join(' '));\n                const id = part.match(ID_MATCH);\n                if (id) node.setAttribute('id', id[0].substr(1));\n                if (refs) {\n                    const ref = part.match(REF_MATCH);\n                    if (ref) refs[ref[0].substr(1)] = node;\n                }\n                continue;\n            } else if (typeof part === \"function\") {\n                return domBuilder(part.apply(null, json.slice(i + 1)), refs);\n            } else {\n                node = document.createDocumentFragment();\n            }\n        }\n\n        // Except the first item if it's an attribute object\n        if (first && typeof part === 'object' && part.constructor === Object) {\n            setAttrs(node as HTMLElement, part);\n        } else {\n            node.appendChild(domBuilder(part, refs));\n        }\n        first = false;\n    }\n    if (!node) throw new Error(\"No node created\");\n    return node;\n}\n\nfunction setAttrs(node: HTMLElement, attrs: { [key: string]: any }) {\n    const keys = Object.keys(attrs);\n    for (const key of keys) {\n        const value = attrs[key];\n        if (key === \"$\") {\n            value(node);\n        } else if (key === \"css\" || key === \"style\" && value.constructor === Object) {\n            setStyle(node.style, value);\n        } else if (key.substr(0, 2) === \"on\") {\n            node.addEventListener(key.substr(2), value, false);\n        } else if (typeof value === \"boolean\") {\n            if (value) node.setAttribute(key, key);\n        } else {\n            node.setAttribute(key, value);\n        }\n    }\n}\n\nfunction setStyle(style: CSSStyleDeclaration, attrs: { [key: string]: string }) {\n    for (const key of Object.keys(attrs)) {\n        // @ts-ignore\n        style[key] = attrs[key];\n    }\n}\n\n\nfunction stripFirst(part: string): string {\n    return part.substr(1);\n}\n"]}