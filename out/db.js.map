{"version":3,"file":"db.js","sourceRoot":"","sources":["../src/db.ts"],"names":[],"mappings":"AAKA,MAAM,UAAU,WAAW,CAA2B,MAAc;IAChE,IAAI,EAAe,CAAC;IACpB,OAAO,IAAI,OAAO,CAAY,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;QAC9C,IAAI,OAAO,GAAG,CAAC,CAAC;QAChB,MAAM,OAAO,GAAG,SAAS,CAAC,IAAI,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;QAChD,OAAO,CAAC,eAAe,GAAG,GAAG,EAAE;YAC3B,OAAO,EAAE,CAAC;YACV,EAAE,GAAG,OAAO,CAAC,MAAM,CAAC;YACpB,EAAE,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC;QACjC,CAAC,CAAC;QACF,OAAO,CAAC,SAAS,GAAG,GAAG,EAAE;YACrB,EAAE,GAAG,OAAO,CAAC,MAAM,CAAC;YACpB,OAAO,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC;QAC1B,CAAC,CAAC;QACF,OAAO,CAAC,OAAO,GAAG,GAAG,EAAE,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;IAClD,CAAC,CAAC,CAAC;IAEH,SAAS,GAAG,CAAC,GAAM;QACf,OAAO,IAAI,OAAO,CAAgB,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YAClD,MAAM,WAAW,GAAG,EAAE,CAAC,WAAW,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC;YACvD,MAAM,KAAK,GAAG,WAAW,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;YAC9C,MAAM,OAAO,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YAC/B,OAAO,CAAC,SAAS,GAAG,GAAG,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;YAClD,OAAO,CAAC,OAAO,GAAG,GAAG,EAAE,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QAClD,CAAC,CAAC,CAAC;IACP,CAAC;IAED,SAAS,GAAG,CAAC,GAAM,EAAE,KAAQ;QACzB,OAAO,IAAI,OAAO,CAAI,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACtC,MAAM,WAAW,GAAG,EAAE,CAAC,WAAW,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC;YACxD,MAAM,KAAK,GAAG,WAAW,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;YAC9C,MAAM,OAAO,GAAG,KAAK,CAAC,GAAG,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;YACtC,OAAO,CAAC,SAAS,GAAG,GAAG,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,MAAW,CAAC,CAAC;YACvD,OAAO,CAAC,OAAO,GAAG,GAAG,EAAE,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QAClD,CAAC,CAAC,CAAC;IACP,CAAC;AACL,CAAC;AAAA,CAAC","sourcesContent":["export interface IDB<K, V> {\n    get: (key: K) => Promise<V | undefined>,\n    set: (key: K, value: V) => Promise<K>,\n}\n\nexport function newKeyValue<K extends IDBValidKey, V>(prefix: string) {\n    let db: IDBDatabase;\n    return new Promise<IDB<K, V>>((resolve, reject) => {\n        let version = 1;\n        const request = indexedDB.open(prefix, version);\n        request.onupgradeneeded = () => {\n            version++;\n            db = request.result;\n            db.createObjectStore(\"data\");\n        };\n        request.onsuccess = () => {\n            db = request.result;\n            resolve({ get, set });\n        };\n        request.onerror = () => reject(request.error);\n    });\n\n    function get(key: K) {\n        return new Promise<V | undefined>((resolve, reject) => {\n            const transaction = db.transaction(\"data\", \"readonly\");\n            const store = transaction.objectStore(\"data\");\n            const request = store.get(key);\n            request.onsuccess = () => resolve(request.result);\n            request.onerror = () => reject(request.error);\n        });\n    }\n\n    function set(key: K, value: V) {\n        return new Promise<K>((resolve, reject) => {\n            const transaction = db.transaction(\"data\", \"readwrite\");\n            const store = transaction.objectStore(\"data\");\n            const request = store.put(value, key);\n            request.onsuccess = () => resolve(request.result as K);\n            request.onerror = () => reject(request.error);\n        });\n    }\n};\n"]}