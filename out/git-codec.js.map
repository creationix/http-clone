{"version":3,"file":"git-codec.js","sourceRoot":"","sources":["../src/git-codec.ts"],"names":[],"mappings":"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","sourcesContent":["// tslint:disable: no-bitwise\n\nimport { toRaw, toString, toHex, indexOf, parseDec, parseOct } from \"./utils.js\";\n\ntype GitPerson = {\n    name: string,\n    email: string\n    date: {\n        seconds: number,\n        offset: number\n    }\n};\n\nexport type GitCommit = {\n    tree: string,\n    parents: string[],\n    author: GitPerson,\n    committer: GitPerson,\n    message: string,\n};\n\nexport type GitTag = { [key: string]: string | GitPerson };\n\nexport type GitTree = { [key: string]: { mode: number, hash: string } };\n\nexport type GitBlob = Uint8Array;\n\nexport type GitObject = GitCommit | GitTag | GitTree | GitBlob;\n\nconst masks = {\n    mask: 0o100000,\n    blob: 0o140000,\n    file: 0o160000,\n};\n\nexport const modes = {\n    tree: 0o040000,\n    blob: 0o100644,\n    file: 0o100644,\n    exec: 0o100755,\n    sym: 0o120000,\n    commit: 0o160000,\n};\n\nexport function isBlob(mode: number) {\n    return (mode & masks.blob) === masks.mask;\n}\n\nexport function isFile(mode: number) {\n    return (mode & masks.file) === masks.mask;\n}\n\nexport function toType(mode: number) {\n    if (mode === modes.commit) return \"commit\";\n    if (mode === modes.tree) return \"tree\";\n    if (isBlob(mode)) return \"blob\";\n    return \"unknown\";\n}\n\n\n\nexport function decodeBlob(body: Uint8Array): GitBlob {\n    return body;\n}\n\nexport function decodeTree(body: Uint8Array): GitTree {\n    var i = 0;\n    var length = body.length;\n    var start;\n    var mode;\n    var name;\n    var hash;\n    const tree: GitTree = {};\n    while (i < length) {\n        start = i;\n        i = indexOf(body, 0x20, start);\n        if (i < 0) throw new SyntaxError(\"Missing space\");\n        mode = parseOct(body, start, i++);\n        start = i;\n        i = indexOf(body, 0x00, start);\n        name = toString(body, start, i++);\n        hash = toHex(body, i, i += 20);\n        tree[name] = {\n            mode: mode,\n            hash: hash\n        };\n    }\n    return tree;\n}\n\nfunction readHeader(body: Uint8Array, i: number, expectedKey: string): [number, string] {\n    if (body[i] === 0x0a) throw new Error(\"Missing header\");\n    let start = i;\n    i = indexOf(body, 0x20, start);\n    if (i < 0) throw new SyntaxError(\"Missing space\");\n    const key = toRaw(body, start, i++);\n    if (key !== expectedKey) throw new Error(`Expected ${expectedKey}, but found ${key}`);\n    start = i;\n    i = indexOf(body, 0x0a, start);\n    if (i < 0) throw new SyntaxError(\"Missing linefeed\");\n    const value: string = toString(body, start, i++);\n    return [i, value];\n}\n\nexport function decodeCommit(body: Uint8Array): GitCommit {\n    let i = 0;\n    let tree: string;\n    [i, tree] = readHeader(body, i, \"tree\");\n    const parents: string[] = [];\n    while (body[i] === 0x70) {\n        let parent: string;\n        [i, parent] = readHeader(body, i, \"parent\");\n        parents.push(parent);\n    }\n    let author: string;\n    [i, author] = readHeader(body, i, \"author\");\n    let committer: string;\n    [i, committer] = readHeader(body, i, \"committer\");\n    const message = toString(body, i + 1, body.length);\n    return {\n        tree,\n        parents,\n        author: decodePerson(author),\n        committer: decodePerson(committer),\n        message\n    };\n}\n\nexport function decodeTag(body: Uint8Array): GitTag {\n    let i = 0;\n    let start: number;\n    let key: string;\n    const tag: GitTag = {};\n    while (body[i] !== 0x0a) {\n        start = i;\n        i = indexOf(body, 0x20, start);\n        if (i < 0) throw new SyntaxError(\"Missing space\");\n        key = toRaw(body, start, i++);\n        start = i;\n        i = indexOf(body, 0x0a, start);\n        if (i < 0) throw new SyntaxError(\"Missing linefeed\");\n        let value: string | GitPerson = toString(body, start, i++);\n        if (key === \"tagger\") value = decodePerson(value);\n        tag[key] = value;\n    }\n    i++;\n    tag.message = toString(body, i, body.length);\n    return tag;\n}\n\nfunction decodePerson(str: string): GitPerson {\n    const match = str.match(/^([^<]*) <([^>]*)> ([^ ]*) (.*)$/);\n    if (!match) throw new Error(\"Improperly formatted person string\");\n    return {\n        name: match[1],\n        email: match[2],\n        date: {\n            seconds: parseInt(match[3], 10),\n            offset: parseInt(match[4], 10) / 100 * -60\n        }\n    };\n}\n\nexport type TaggedObject = { type: \"tree\", body: GitTree }\n    | { type: \"tag\", body: GitTag }\n    | { type: \"commit\", body: GitCommit }\n    | { type: \"blob\", body: GitBlob };\n\nexport function deframe(buffer: Uint8Array, decode: true): TaggedObject\nexport function deframe(buffer: Uint8Array, decode: false): { type: string, body: Uint8Array }\nexport function deframe(buffer: Uint8Array, decode: boolean): TaggedObject | { type: string, body: Uint8Array } {\n    const space = indexOf(buffer, 0x20);\n    if (space < 0) throw new Error(\"Invalid git object buffer\");\n    const nil = indexOf(buffer, 0x00, space);\n    if (nil < 0) throw new Error(\"Invalid git object buffer\");\n    const body = buffer.subarray(nil + 1);\n    const size = parseDec(buffer, space + 1, nil);\n    if (size !== body.length) throw new Error(\"Invalid body length.\");\n    const type = toRaw(buffer, 0, space) as \"tree\" | \"tag\" | \"commit\" | \"blob\";\n    if (!decode) return { type, body };\n    if (type === \"tree\") return { type, body: decodeTree(body) };\n    if (type === \"tag\") return { type, body: decodeTag(body) };\n    if (type === \"commit\") return { type, body: decodeCommit(body) };\n    if (type === \"blob\") return { type, body: decodeBlob(body) };\n    throw new Error(`Unexpected git type '${type}'`);\n}\n\n"]}